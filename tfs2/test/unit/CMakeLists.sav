# ================================================================ 
# testing
# ================================================================

# Make sure testing is enabled
ENABLE_TESTING()

# Use Python interpreter
FIND_PACKAGE(PythonInterp)

# Path to the cxxtestgen.py script
SET(CXXTESTGEN ${THIRD_PARTY_ROOT}/cxxtest/cxxtestgen.py)

# This macro simplifies the inclusion of tests written using the CxxTest
MACRO(ADD_CXXTEST NAME)
  IF(PYTHONINTERP_FOUND)
    # clean PARTS
    SET(PARTS)
    # generate the parts
    FOREACH(_PART ${ARGN})
      #GET_FILENAME_COMPONENT(_NAME ${_PART} NAME)
      GET_FILENAME_COMPONENT(_PATH ${_PART} PATH)
      GET_FILENAME_COMPONENT(_NAME_WE ${_PART} NAME_WE)
      GET_FILENAME_COMPONENT(_EXT ${_PART} EXT)

      IF(_EXT STREQUAL ".cpp")
	  # get cpp files to be linked
	    SET(PARTS ${PARTS} ${_PART})
      ELSEIF(_EXT STREQUAL ".hpp")
	    ADD_CUSTOM_COMMAND(
          OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/${_NAME_WE}.cpp
          COMMAND
          ${PYTHON_EXECUTABLE} ${CXXTESTGEN}
          --part
          -o ${_NAME_WE}.cpp
          ${_PART}
          DEPENDS ${_PART}
          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	    )
	    # get generated cpp files
		#MESSAGE("generate ${CMAKE_CURRENT_BINARY_DIR}/${_NAME_WE}.cpp")
	    #SET(PARTS ${PARTS} ${CMAKE_CURRENT_BINARY_DIR}/${_NAME_WE}.cpp)
	    SET(PARTS ${PARTS} ${_NAME_WE}.cpp)
      ENDIF(_EXT STREQUAL ".cpp")
    ENDFOREACH(_PART)

    # generate the runner
    ADD_CUSTOM_COMMAND(
      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NAME}_runner.cpp
      COMMAND
      ${PYTHON_EXECUTABLE} ${CXXTESTGEN}
      --runner=ErrorPrinter --root
      -o ${NAME}_runner.cpp
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      )
	#MESSAGE("generate ${NAME}_runner.cpp")
    SET(PARTS ${PARTS} ${CMAKE_CURRENT_BINARY_DIR}/${NAME}_runner.cpp)

    WRITE_FILE(CMakeTFS.log "PARTS:${PARTS}" APPEND)
    
    #ADD_EXECUTABLE(${NAME} ${PARTS} ${CMAKE_CURRENT_BINARY_DIR}/${_NAME_WE}.cpp)
    #ADD_EXECUTABLE(${NAME} ${CMAKE_CURRENT_BINARY_DIR}/${_NAME_WE}.cpp ${PARTS} )
    ADD_EXECUTABLE(${NAME} ${PARTS} )
    
    ADD_TEST(${NAME} ${CMAKE_CURRENT_BINARY_DIR}/${NAME})
    
  ENDIF(PYTHONINTERP_FOUND)
ENDMACRO(ADD_CXXTEST)

#===============================================================================================
# Testing
#===============================================================================================
ADD_CXXTEST(testCxxTest ${TEST_ROOT}/TestCxxTest.hpp)

ADD_CXXTEST(testActiveChunkManager ${TEST_ROOT}/master/TestActiveChunkManager.hpp 
    ${MODULE_MST_ROOT}/ActiveChunkManager.cpp ${MODULE_ICE_ROOT}/Exceptions.cpp ${MODULE_ICE_ROOT}/Address.cpp)

ADD_CXXTEST(testChunkServerManager ${TEST_ROOT}/master/TestChunkServerManager.hpp 
    ${MODULE_MST_ROOT}/ChunkServerManager.cpp ${MODULE_ICE_ROOT}/Exceptions.cpp ${MODULE_ICE_ROOT}/Address.cpp 
    ${MODULE_ICE_ROOT}/Chunk.cpp)

ADD_CXXTEST(testClientManager ${TEST_ROOT}/master/TestClientManager.hpp ${MODULE_MST_ROOT}/ClientManager.cpp 
    ${MODULE_ICE_ROOT}/Exceptions.cpp ${MODULE_ICE_ROOT}/Address.cpp)

ADD_CXXTEST(testClient ${TEST_ROOT}/client/TestClient.hpp)
TARGET_LINK_LIBRARIES(testClient tfs_client)


ADD_CXXTEST(testFsDirectory ${TEST_ROOT}/master/TestFsDirectory.hpp ${MODULE_MST_ROOT}/FsDirectory.cpp 
    ${MODULE_MST_ROOT}/FsDirectoryImpl.cpp ${MODULE_MST_ROOT}/FsDirectoryDebug.cpp ${MODULE_MST_ROOT}/FsJournalManager.cpp 
    ${MODULE_MST_ROOT}/FsLog.cpp ${MODULE_ICE_ROOT}/Exceptions.cpp ${MODULE_MST_ROOT}/Path.cpp ${MODULE_MST_ROOT}/DirNode.cpp 
    ${MODULE_MST_ROOT}/DirTree.cpp ${MODULE_MST_ROOT}/DirTreePath.cpp ${MODULE_MST_ROOT}/INode.cpp 
    ${MODULE_MST_ROOT}/LockTable.cpp ${MODULE_MST_ROOT}/ChunkTable.cpp ${MODULE_MST_ROOT}/NewChunkTable.cpp 
    ${MODULE_MST_ROOT}/MasterConfig.cpp)
TARGET_LINK_LIBRARIES(testFsDirectory boost_serialization boost_filesystem)

ADD_CXXTEST(testChunkTable ${TEST_ROOT}/master/TestChunkTable.hpp ${MODULE_MST_ROOT}/ChunkTable.cpp 
    ${MODULE_ICE_ROOT}/Exceptions.cpp ${MODULE_MST_ROOT}/MasterConfig.cpp)

ADD_CXXTEST(testNewChunkTable ${TEST_ROOT}/master/TestNewChunkTable.hpp ${MODULE_MST_ROOT}/NewChunkTable.cpp 
    ${MODULE_ICE_ROOT}/Exceptions.cpp ${MODULE_MST_ROOT}/Path.cpp ${MODULE_MST_ROOT}/MasterConfig.cpp)

ADD_CXXTEST(testDirTree ${TEST_ROOT}/master/TestDirTree.hpp ${MODULE_ICE_ROOT}/Exceptions.cpp 
    ${MODULE_MST_ROOT}/DirTree.cpp ${MODULE_MST_ROOT}/DirNode.cpp ${MODULE_MST_ROOT}/Path.cpp 
    ${MODULE_MST_ROOT}/INode.cpp ${MODULE_MST_ROOT}/DirTreePath.cpp ${MODULE_MST_ROOT}/MasterConfig.cpp)
TARGET_LINK_LIBRARIES(testDirTree boost_serialization)

ADD_CXXTEST(testDirTreePath ${TEST_ROOT}/master/TestDirTreePath.hpp ${MODULE_ICE_ROOT}/Exceptions.cpp 
    ${MODULE_MST_ROOT}/DirTree.cpp ${MODULE_MST_ROOT}/DirNode.cpp ${MODULE_MST_ROOT}/Path.cpp 
    ${MODULE_MST_ROOT}/INode.cpp ${MODULE_MST_ROOT}/DirTreePath.cpp ${MODULE_MST_ROOT}/MasterConfig.cpp)

ADD_CXXTEST(testFsLog ${TEST_ROOT}/master/TestFsLog.hpp ${MODULE_ICE_ROOT}/Exceptions.cpp ${MODULE_MST_ROOT}/FsLog.cpp )

ADD_CXXTEST(testFsJournalManager ${TEST_ROOT}/master/TestFsJournalManager.hpp ${MODULE_MST_ROOT}/FsDirectoryImpl.cpp 
    ${MODULE_MST_ROOT}/FsDirectoryDebug.cpp ${MODULE_MST_ROOT}/FsJournalManager.cpp ${MODULE_MST_ROOT}/FsLog.cpp 
    ${MODULE_ICE_ROOT}/Exceptions.cpp ${MODULE_MST_ROOT}/Path.cpp ${MODULE_MST_ROOT}/DirNode.cpp 
    ${MODULE_MST_ROOT}/DirTree.cpp ${MODULE_MST_ROOT}/DirTreePath.cpp ${MODULE_MST_ROOT}/INode.cpp 
    ${MODULE_MST_ROOT}/LockTable.cpp ${MODULE_MST_ROOT}/ChunkTable.cpp ${MODULE_MST_ROOT}/NewChunkTable.cpp 
    ${MODULE_MST_ROOT}/MasterConfig.cpp)
TARGET_LINK_LIBRARIES(testFsJournalManager tfs_fsdirecotry boost_serialization boost_filesystem)

ADD_CXXTEST(testLockTable ${TEST_ROOT}/master/TestLockTable.hpp ${MODULE_MST_ROOT}/LockTable.cpp ${MODULE_ICE_ROOT}/Exceptions.cpp)

ADD_CXXTEST(testPath ${TEST_ROOT}/master/TestPath.hpp ${MODULE_MST_ROOT}/Path.cpp)

